# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DCZWydGLnR_dqBRAT93XYDEt2txH1k9d
"""

# --- Step 1: User Profile Initialization ---

# Helper: BMI interpretation
def interpret_bmi(bmi):
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 25:
        return "Normal weight"
    elif 25 <= bmi < 30:
        return "Overweight"
    else:
        return "Obese"

# Collect user info (Colab input)
def get_user_profile():
    print("Please enter your details below:")

    # Basic Info
    age = int(input("Age: "))
    gender = input("Gender (M/F/Other): ")
    height_cm = float(input("Height (cm): "))
    weight_kg = float(input("Weight (kg): "))

    # Health Background
    med_conditions = input("Medical conditions (comma separated, e.g., diabetes, thyroid) or 'none': ")
    allergies = input("Allergies (comma separated) or 'none': ")

    # Lifestyle
    sleep_hours = float(input("Average sleep hours per night: "))
    activity_level = input("Daily activity level (low/medium/high): ")

    # Dietary Preferences
    diet_pref = input("Dietary preference (veg/non-veg/vegan): ")
    gluten_free = input("Gluten-free? (yes/no): ").lower() == "yes"
    lactose_intol = input("Lactose intolerant? (yes/no): ").lower() == "yes"

    # Goals
    goal = input("Goal (Weight Loss/Weight Gain/Maintain): ")
    target_weight = float(input("Target weight (kg): "))
    target_duration = int(input("Target duration (weeks): "))

    # Calculate BMI
    height_m = height_cm / 100
    bmi = weight_kg / (height_m ** 2)
    bmi_status = interpret_bmi(bmi)

    # Store in dictionary
    user_profile = {
        "age": age,
        "gender": gender,
        "height_cm": height_cm,
        "weight_kg": weight_kg,
        "medical_conditions": [x.strip() for x in med_conditions.split(",")] if med_conditions.lower() != "none" else [],
        "allergies": [x.strip() for x in allergies.split(",")] if allergies.lower() != "none" else [],
        "sleep_hours": sleep_hours,
        "activity_level": activity_level,
        "dietary_preference": diet_pref,
        "gluten_free": gluten_free,
        "lactose_intolerant": lactose_intol,
        "goal": goal,
        "target_weight": target_weight,
        "target_duration_weeks": target_duration,
        "bmi": round(bmi, 2),
        "bmi_status": bmi_status
    }

    print(f"\nYour BMI is: {user_profile['bmi']} ({user_profile['bmi_status']})")
    return user_profile

# --- Test with sample values (uncomment for quick test) ---
# import sys
# from io import StringIO
# sys.stdin = StringIO('28\nM\n175\n80\ndiabetes\npeanuts\n7\nmedium\nveg\nno\nno\nWeight Loss\n70\n12\n')

# Run the function
user_profile = get_user_profile()
print("\nUser Profile Summary:")
for k, v in user_profile.items():
    print(f"{k}: {v}")

# --- Calculate ideal weight, calorie needs, and macros ---

def calculate_ideal_weight_range(height_cm):
    height_m = height_cm / 100
    min_weight = 18.5 * (height_m ** 2)
    max_weight = 24.9 * (height_m ** 2)
    return (round(min_weight, 1), round(max_weight, 1))

def calculate_bmr(user_profile):
    weight = user_profile['weight_kg']
    height = user_profile['height_cm']
    age = user_profile['age']
    gender = user_profile['gender'].lower()
    if gender == 'm':
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    return bmr

def get_activity_factor(activity_level):
    if activity_level == 'low':
        return 1.2
    elif activity_level == 'medium':
        return 1.55
    elif activity_level == 'high':
        return 1.725
    else:
        return 1.2  # default

def calculate_calorie_range(user_profile, ideal_weight_range):
    activity_factor = get_activity_factor(user_profile['activity_level'].lower())
    min_bmr = calculate_bmr({**user_profile, 'weight_kg': ideal_weight_range[0]})
    max_bmr = calculate_bmr({**user_profile, 'weight_kg': ideal_weight_range[1]})
    min_cal = int(min_bmr * activity_factor)
    max_cal = int(max_bmr * activity_factor)
    return (min_cal, max_cal)

def get_calorie_target(user_profile, calorie_range):
    if user_profile['goal'].lower() == 'weight loss':
        return calorie_range[0] - 500  # 500 kcal deficit
    elif user_profile['goal'].lower() == 'weight gain':
        return calorie_range[1] + 300  # 300 kcal surplus
    else:
        return int(sum(calorie_range) / 2)  # maintenance

def get_macros(calorie_target):
    # Example: 50% carbs, 20% protein, 30% fat
    carbs = int(0.5 * calorie_target / 4)
    protein = int(0.2 * calorie_target / 4)
    fat = int(0.3 * calorie_target / 9)
    return {'carbs_g': carbs, 'protein_g': protein, 'fat_g': fat}

# --- Now calculate the meal_plan dictionary ---
ideal_weight_range = calculate_ideal_weight_range(user_profile['height_cm'])
ideal_calorie_range = calculate_calorie_range(user_profile, ideal_weight_range)
calorie_target = get_calorie_target(user_profile, ideal_calorie_range)
macros = get_macros(calorie_target)

meal_plan = {
    'ideal_weight_range': ideal_weight_range,
    'ideal_calorie_range': ideal_calorie_range,
    'calorie_target': calorie_target,
    'macros': macros
}

#!pip install google-generativeai

import google.generativeai as genai

# Paste your API key here (keep it private!)
GOOGLE_API_KEY = ""  # <-- Replace with your key

genai.configure(api_key=GOOGLE_API_KEY)
# Choose the model: "gemini-1.5-flash" (fast, good) or "gemini-1.5-pro" (more powerful)
model = genai.GenerativeModel("gemini-1.5-flash")

def ai_generate_weekly_meal_plan_gemini(user_profile, calorie_target, macros):
    prompt = f"""
    You are a certified nutritionist. Create a 7-day meal plan for a {user_profile['age']}-year-old {user_profile['gender']} who is {user_profile['height_cm']} cm tall, weighs {user_profile['weight_kg']} kg, and wants to {user_profile['goal']}.
    - Dietary preference: {user_profile['dietary_preference']}
    - Gluten-free: {user_profile['gluten_free']}
    - Lactose intolerant: {user_profile['lactose_intolerant']}
    - Allergies: {', '.join(user_profile['allergies']) if user_profile['allergies'] else 'none'}
    - Medical conditions: {', '.join(user_profile['medical_conditions']) if user_profile['medical_conditions'] else 'none'}
    - Activity level: {user_profile['activity_level']}
    - Calorie target: {calorie_target} kcal
    - Macros: {macros['carbs_g']}g carbs, {macros['protein_g']}g protein, {macros['fat_g']}g fat

    Please provide:
    - A 7-day meal plan (each day: breakfast, mid-morning snack, lunch, evening snack, dinner)
    - For each meal: list the dish, portion size, and estimated calories
    - Ensure all restrictions are followed
    - Output in a clear, readable markdown table, with days clearly separated

    At the end, provide a consolidated shopping list for the week, grouped by food category (e.g., vegetables, proteins, grains, dairy, etc.).
    """

    response = model.generate_content(prompt)
    return response.text

# Generate and display health snapshot (from your previous code)
print(" **Your Health Snapshot**\n")
print(f"  Ideal Weight Range (Based on BMI): {meal_plan['ideal_weight_range'][0]}–{meal_plan['ideal_weight_range'][1]} kg")
print(f" Calorie Needs for Ideal BMI (with {user_profile['activity_level']} activity): {meal_plan['ideal_calorie_range'][0]}–{meal_plan['ideal_calorie_range'][1]} kcal/day\n")
print(f" Your Current Goal: {user_profile['goal'].capitalize()}")
print(f"Personalized Calorie Target: {meal_plan['calorie_target']} kcal/day\n")

# Generate and display AI-powered weekly meal plan with shopping list
print("🤖 **AI-Powered Weekly Meal Plan**\n")
weekly_meal_plan_text = ai_generate_weekly_meal_plan_gemini(
    user_profile,
    meal_plan['calorie_target'],
    meal_plan['macros']
)
print(weekly_meal_plan_text)

print(weekly_meal_plan_text)

for i, line in enumerate(weekly_meal_plan_text.splitlines()[:40], 1):
    print(f"{i:2}: {line}")

import re

# Try to find the first markdown table in the output
table_match = re.search(
    r'(\| *Day *\|.*?\|)(?=\n\s*\*\*Shopping List:\*\*)',
    weekly_meal_plan_text,
    re.DOTALL | re.IGNORECASE
)

if table_match:
    table_text = table_match.group(1)
    print("Extracted table block:\n")
    print(table_text[:1000])  # Print the first 1000 characters for inspection
else:
    print("Meal plan table still not found. Please check the output above for clues.")

import pandas as pd
from io import StringIO
import re

# Remove markdown separator lines (those with only dashes and pipes)
lines = [line for line in table_text.strip().split('\n') if not re.match(r'^\s*\|(?:\s*-+\s*\|)+\s*$', line)]
cleaned_table = '\n'.join(lines)

# Print the cleaned table for inspection (optional)
print("Cleaned table preview:\n")
print('\n'.join(cleaned_table.splitlines()[:10]))  # Show first 10 lines

# Parse with pandas
df_meal_plan = pd.read_csv(StringIO(cleaned_table), sep="|", engine="python")
df_meal_plan = df_meal_plan.loc[:, ~df_meal_plan.columns.str.contains('^Unnamed')]
df_meal_plan = df_meal_plan.apply(lambda x: x.str.strip() if x.dtype == "object" else x)

# Display the DataFrame
print(df_meal_plan)





import re
import pandas as pd

# --- Extract and parse the categorized shopping list from Gemini output ---

# Make sure weekly_meal_plan_text contains your Gemini output as a string

shopping_list_match = re.search(r'\*\*Shopping List:\*\*([\s\S]+)', weekly_meal_plan_text)
if shopping_list_match:
    shopping_list_text = shopping_list_match.group(1)
    # Find all categories and their items
    categories = re.findall(r'\*\*(.+?)\*\*:?([\s\S]+?)(?=(\*\*|$))', shopping_list_text)
    shopping_items = []
    for cat, items, _ in categories:
        # Find all bullet points in this section
        item_list = re.findall(r'\* (.+)', items)
        for item in item_list:
            shopping_items.append({'Category': cat.strip(), 'Item': item.strip()})

    # Create DataFrame
    df_shopping = pd.DataFrame(shopping_items)
    print("🛒 Shopping List DataFrame")
    print(df_shopping)
else:
    print("❌ Shopping list not found in the output.")

"""NUTRITIONIST"""

# --- AI Nutritionist: Structured food analysis with Gemini ---

# Prompt the user for food details
food_name = input("Enter the food name (e.g., 'roti', 'chicken breast'): ")
ingredient_list = input("Enter the ingredients (separated by commas): ").split(',')
quantity = input("Enter the quantity consumed (e.g., '2 pieces', '150 grams', '1 sandwich'): ")
prep_method = input("Enter the preparation method (e.g., 'grilled', 'fried', 'baked', or leave blank if not applicable): ")


def ai_nutritionist_structured(food_name, quantity, prep_method, user_profile):
    prompt = f"""
    You are a nutritionist. Analyze the following food input for a user with these details:
    - Age: {user_profile['age']}
    - Gender: {user_profile['gender']}
    - Weight: {user_profile['weight_kg']} kg
    - Height: {user_profile['height_cm']} cm
    - Medical conditions: {', '.join(user_profile['medical_conditions']) if user_profile['medical_conditions'] else 'none'}
    - Allergies: {', '.join(user_profile['allergies']) if user_profile['allergies'] else 'none'}
    - Dietary preference: {user_profile['dietary_preference']}
    - Gluten-free: {user_profile['gluten_free']}
    - Lactose intolerant: {user_profile['lactose_intolerant']}

    Food details:
    - Food name: {food_name}
    - Quantity consumed: {quantity}
    - Preparation method: {prep_method if prep_method else 'Not specified'}
    - Ingredients: {', '.join(ingredient_list)}

    Please provide:
    - Estimated total calories
    - Estimated macronutrients (carbs, protein, fat in grams)
    - Any warnings or notes based on the user's medical conditions or allergies
    - Output in a clear, readable format
    """
    response = model.generate_content(prompt)
    return response.text

# Analyze the structured food input
nutrition_report = ai_nutritionist_structured(food_name, quantity, prep_method, user_profile)
print("\nNutrition Analysis:\n")
print(nutrition_report)

"""visual analysis"""

import google.generativeai as genai

GOOGLE_API_KEY = ""  # <-- Replace with your key
genai.configure(api_key=GOOGLE_API_KEY)

# Use the vision-capable model
vision_model = genai.GenerativeModel("gemini-1.5-pro-latest")

from google.colab import files
from PIL import Image
import io

uploaded = files.upload()
image_path = None
for filename in uploaded.keys():
    image_path = filename
    print(f"Uploaded file: {filename}")

# Open the image for later use
if image_path:
    img = Image.open(image_path)
else:
    raise Exception("No image uploaded.")

def ai_nutritionist_image_analysis(img, user_profile):
    prompt = f"""
    You are a nutritionist. Analyze the food in this image for a user with these details:
    - Age: {user_profile['age']}
    - Gender: {user_profile['gender']}
    - Weight: {user_profile['weight_kg']} kg
    - Height: {user_profile['height_cm']} cm
    - Medical conditions: {', '.join(user_profile['medical_conditions']) if user_profile['medical_conditions'] else 'none'}
    - Allergies: {', '.join(user_profile['allergies']) if user_profile['allergies'] else 'none'}
    - Dietary preference: {user_profile['dietary_preference']}
    - Gluten-free: {user_profile['gluten_free']}
    - Lactose intolerant: {user_profile['lactose_intolerant']}

    Please provide:
    - The most likely food(s) in the image
    - Estimated portion size (e.g., grams, pieces, cups, etc.)
    - Estimated total calories
    - Estimated macronutrients (carbs, protein, fat in grams)
    - Any warnings or notes based on the user's medical conditions, allergies, or dietary restrictions
    - Output in a clear, readable format
    """

    response = vision_model.generate_content([prompt, img])
    return response.text

nutrition_report = ai_nutritionist_image_analysis(img, user_profile)
print("\nNutrition Analysis from Image:\n")
print(nutrition_report)

"""**Barcode** **Analysis**"""

#!pip install pyzbar pillow python-barcode
#!apt-get install libzbar0
'''
from google.colab import files
from PIL import Image
from pyzbar.pyzbar import decode

# Upload barcode image
uploaded = files.upload()
barcode_image_path = None
for filename in uploaded.keys():
    barcode_image_path = filename
    print(f"Uploaded file: {filename}")

# Decode barcode
barcode_data = None
if barcode_image_path:
    img = Image.open(barcode_image_path)
    decoded_objects = decode(img)
    if decoded_objects:
        barcode_data = decoded_objects[0].data.decode('utf-8')
        print(f"Barcode detected: {barcode_data}")
    else:
        print("No barcode detected in the image.")
else:
    print("No image uploaded.")

import requests

def get_food_info_from_barcode(barcode):
    url = f"https://world.openfoodfacts.org/api/v0/product/{barcode}.json"
    response = requests.get(url)
    print("Status code:", response.status_code)
    if response.status_code == 200:
        data = response.json()
        print("Raw response:", data)
        if data.get('status') == 1:
            product = data['product']
            name = product.get('product_name', 'Unknown')
            nutriments = product.get('nutriments', {})
            calories = nutriments.get('energy-kcal_100g', 'N/A')
            protein = nutriments.get('proteins_100g', 'N/A')
            carbs = nutriments.get('carbohydrates_100g', 'N/A')
            fat = nutriments.get('fat_100g', 'N/A')
            return {
                'name': name,
                'calories_per_100g': calories,
                'protein_per_100g': protein,
                'carbs_per_100g': carbs,
                'fat_per_100g': fat
            }
        else:
            print("No product found for this barcode.")
            return None
    else:
        print("API request failed.")
        return None

if barcode_data:
    food_info = get_food_info_from_barcode(barcode_data)
    if food_info:
        print("Packaged Food Info:")
        for k, v in food_info.items():
            print(f"{k}: {v}")
    else:
        print("No product found for this barcode.")
else:
    print("No barcode data to look up.")
    '''

"""**tracking** **and:** **Analytics**
*italicized text*
"""

# --- Calorie-Only Tracking & Analytics Module (Colab, AI-Only Calorie Estimation) ---

from collections import defaultdict
from datetime import date, datetime
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# --- Data Structures ---
meal_log = defaultdict(lambda: defaultdict(list))  # {date: {category: [meal_entries]}}
weight_log = {}
water_log = defaultdict(int)
recent_meals = []
meal_freq = defaultdict(int)

# --- AI Calorie Estimation (Calories Only) ---
def estimate_calories_ai_only(food_name, quantity, ingredients, user_profile, model):
    prompt = f"""
    You are a nutritionist. Estimate the total calories for this meal:
    - User: {user_profile['age']} years, {user_profile['gender']}, {user_profile['weight_kg']}kg, {user_profile['height_cm']}cm
    - Food: {food_name}
    - Quantity: {quantity}
    - Ingredients: {ingredients}
    Output ONLY the calorie number (integer, no units or extra text).
    Example: 350
    """
    response = model.generate_content(prompt)
    print("AI Calorie Estimate:", response.text)
    import re
    match = re.search(r'(\d+)', response.text)
    if match:
        calories = int(match.group(1))
        return calories
    else:
        raise ValueError("AI response could not be parsed. Please check the prompt or model output.")

# --- Meal Logging (with suggestions) ---
def log_meal(user_profile, meal_log, recent_meals, meal_freq, model):
    today = str(date.today())
    print("\n--- Meal Logging ---")
    print("Meal categories: breakfast, lunch, dinner, snacks")
    category = input("Which meal? (breakfast/lunch/dinner/snacks): ").strip().lower()
    # Suggestions
    if recent_meals:
        print("Recent meals:", recent_meals[-3:])
    if meal_freq:
        print("Frequent meals:", sorted(meal_freq, key=meal_freq.get, reverse=True)[:3])
    food_name = input("Food name: ")
    quantity = input("Quantity (e.g., '2 rotis', '150g'): ")
    ingredients = input("Ingredients (comma separated): ")
    try:
        calories = estimate_calories_ai_only(food_name, quantity, ingredients, user_profile, model)
    except Exception as e:
        print("AI estimation failed:", e)
        return
    entry = {
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'food_name': food_name,
        'quantity': quantity,
        'ingredients': ingredients,
        'calories': calories
    }
    meal_log[today][category].append(entry)
    meal_str = f"{food_name} ({quantity})"
    recent_meals.append(meal_str)
    meal_freq[meal_str] += 1
    print("Meal logged!")

# --- Daily Calorie Calculation and Comparison ---
def get_daily_calories(meal_log, day):
    total = 0
    for category in meal_log.get(day, {}):
        for entry in meal_log[day][category]:
            total += entry['calories']
    return total

def show_daily_summary(user_profile, meal_log, day, calorie_target):
    total = get_daily_calories(meal_log, day)
    print(f"\nSummary for {day}:")
    print(f"Total calories: {total} kcal")
    print(f"Target calories: {calorie_target} kcal")
    if total > calorie_target:
        print("⚠️ You exceeded your calorie target!")
    else:
        print("✅ Within your calorie target.")

# --- Weight Logging ---
def log_weight(weight_log):
    today = str(date.today())
    try:
        weight = float(input("Enter your current weight (kg): "))
    except:
        print("Invalid input, please enter a number.")
        return log_weight(weight_log)
    weight_log[today] = weight
    print(f"Weight for {today} logged: {weight} kg")

# --- Water Logging ---
def log_water(water_log):
    today = str(date.today())
    try:
        amount = int(input("Enter water intake (ml): "))
    except:
        print("Invalid input, please enter a number.")
        return log_water(water_log)
    water_log[today] += amount
    print(f"Total water today: {water_log[today]} ml")

# --- Visualization ---
def plot_weight_trend(weight_log):
    if not weight_log:
        print("No weight data to plot.")
        return
    dates = list(weight_log.keys())
    weights = list(weight_log.values())
    plt.figure(figsize=(8,4))
    plt.plot(dates, weights, marker='o')
    plt.title("Weight Trend")
    plt.xlabel("Date")
    plt.ylabel("Weight (kg)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def plot_calorie_trend(meal_log, calorie_target):
    days = sorted(meal_log.keys())
    totals = [get_daily_calories(meal_log, d) for d in days]
    plt.figure(figsize=(8,4))
    plt.bar(days, totals, color='skyblue', label='Actual')
    plt.axhline(calorie_target, color='red', linestyle='--', label='Target')
    plt.title("Daily Calorie Intake")
    plt.xlabel("Date")
    plt.ylabel("Calories")
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def plot_calorie_heatmap(meal_log, water_log=None):
    days = sorted(meal_log.keys())
    categories = ['breakfast', 'lunch', 'dinner', 'snacks']
    data = []
    for d in days:
        row = []
        for cat in categories:
            row.append(sum(e['calories'] for e in meal_log[d].get(cat, [])))
        data.append(row)
    if not data:
        print("No meal data to plot.")
        return
    df = pd.DataFrame(data, index=days, columns=categories)
    plt.figure(figsize=(8,6))
    sns.heatmap(df, annot=True, fmt=".0f", cmap="YlOrRd")
    plt.title("Meal Calorie Heatmap")
    plt.ylabel("Date")
    plt.xlabel("Meal")
    plt.tight_layout()
    plt.show()
    # Optional: Hydration heatmap
    if water_log:
        water_vals = [water_log.get(d, 0) for d in days]
        plt.figure(figsize=(8,2))
        sns.heatmap([water_vals], annot=True, fmt=".0f", cmap="Blues", yticklabels=["Water (ml)"], xticklabels=days)
        plt.title("Daily Hydration Heatmap")
        plt.tight_layout()
        plt.show()

# --- Example Usage (run these as needed) ---
# log_meal(user_profile, meal_log, recent_meals, meal_freq, model)
# show_daily_summary(user_profile, meal_log, str(date.today()), calorie_target)
# log_weight(weight_log)
# log_water(water_log)
# plot_weight_trend(weight_log)
# plot_calorie_trend(meal_log, calorie_target)
# plot_calorie_heatmap(meal_log, water_log)

"""smart ** **bold text**recommendation**"""

# --- Smart Recommendation System for AI Health Assistant ---

import pandas as pd

# Optional: Feedback log (list of strings, e.g., ["felt hungry at night", "bored of current meals"])
feedback_log = []

def get_weight_trend(weight_log, days=7):
    """Returns average weight change per week (or over available days)."""
    if len(weight_log) < 2:
        return 0
    dates = sorted(weight_log.keys())
    weights = [weight_log[d] for d in dates]
    # Use only the last 'days' entries if possible
    if len(weights) > days:
        weights = weights[-days:]
        dates = dates[-days:]
    delta = weights[-1] - weights[0]
    num_days = (pd.to_datetime(dates[-1]) - pd.to_datetime(dates[0])).days or 1
    return delta / num_days * 7  # project to per week

def get_calorie_trend(meal_log, days=7):
    """Returns average daily calorie intake over the last 'days'."""
    all_days = sorted(meal_log.keys())
    if not all_days:
        return 0
    days = min(days, len(all_days))
    recent_days = all_days[-days:]
    totals = [get_daily_calories(meal_log, d) for d in recent_days]
    return sum(totals) / days

def get_recent_feedback(feedback_log):
    """Returns the most recent feedback, if any."""
    if not feedback_log:
        return None
    return feedback_log[-1]

def smart_recommendation_system(user_profile, meal_log, weight_log, calorie_target, feedback_log=None):
    print("\n--- Smart Recommendation System ---")
    # 1. Weight trend analysis
    weight_trend = get_weight_trend(weight_log)
    calorie_trend = get_calorie_trend(meal_log)
    print(f"Weight change trend: {weight_trend:+.2f} kg/week")
    print(f"Average daily calorie intake (last week): {calorie_trend:.0f} kcal")
    print(f"Your current calorie target: {calorie_target} kcal")

    # 2. Feedback analysis
    feedback = get_recent_feedback(feedback_log) if feedback_log else None

    # 3. Recommendations
    recs = []

    # A. Adjust calorie target if weight is not changing as desired
    if user_profile['goal'].lower() == 'weight loss':
        if weight_trend > -0.2:  # Not losing weight
            recs.append("Consider reducing your daily calorie target by 100-200 kcal or increasing your activity level.")
        elif weight_trend < -1.0:
            recs.append("You are losing weight rapidly. Consider increasing your calorie target slightly for a safer pace.")
        else:
            recs.append("Great job! Your weight loss pace is healthy.")
    elif user_profile['goal'].lower() == 'weight gain':
        if weight_trend < 0.2:
            recs.append("Consider increasing your daily calorie target by 100-200 kcal or adding a calorie-dense snack.")
        elif weight_trend > 1.0:
            recs.append("You are gaining weight rapidly. Consider reducing your calorie target slightly for a healthier pace.")
        else:
            recs.append("Great job! Your weight gain pace is healthy.")
    else:
        if abs(weight_trend) > 0.2:
            recs.append("Your weight is fluctuating. Consider reviewing your calorie intake and activity level.")
        else:
            recs.append("You are maintaining your weight well.")

    # B. Diet plan difficulty suggestions
    if calorie_trend > calorie_target + 200:
        recs.append("You are consistently exceeding your calorie target. Consider meal prepping, tracking snacks more closely, or trying a lower-carb meal plan.")
    if calorie_trend < calorie_target - 200:
        recs.append("You are consistently under your calorie target. Make sure you are eating enough, or consider increasing portion sizes.")

    # C. Feedback-based suggestions
    if feedback:
        if "hungry" in feedback.lower():
            recs.append("You reported feeling hungry. Consider increasing protein or fiber at dinner, or adding a healthy evening snack.")
        if "late night" in feedback.lower() or "night" in feedback.lower():
            recs.append("You reported late-night hunger. Try shifting more calories to dinner or adding a small, protein-rich snack at night.")
        if "bored" in feedback.lower():
            recs.append("Bored of your meals? Try new recipes or switch up your meal plan for variety.")

    # D. Advanced: Suggest intermittent fasting or low-carb if user is struggling
    if user_profile['goal'].lower() == 'weight loss' and weight_trend > -0.2:
        recs.append("If you are not seeing results, you could try intermittent fasting (e.g., 16:8) or a low-carb meal plan for a few weeks.")

    # E. Encourage feedback
    if not feedback:
        recs.append("Tip: Log your feedback (e.g., 'felt hungry at night', 'bored of meals') for smarter recommendations.")

    # F. Personalized encouragement
    if abs(weight_trend) < 0.2 and abs(calorie_trend - calorie_target) < 100:
        recs.append("You're doing great! Keep up the consistency.")

    # Print recommendations
    print("\nPersonalized Recommendations:")
    for i, rec in enumerate(recs, 1):
        print(f"{i}. {rec}")

# --- Example Usage ---
# feedback_log.append(input("Any feedback for today? (e.g., 'felt hungry at night', 'bored of meals', or leave blank): "))
# smart_recommendation_system(user_profile, meal_log, weight_log, calorie_target, feedback_log)

smart_recommendation_system(user_profile, meal_log, weight_log, calorie_target, feedback_log)

"""ai powered meal suggestion

"""

# --- AI Meal & Recipe Suggestion System with Feedback & Favorites ---

# Cookbook and feedback storage
favorite_recipes = []
recipe_feedback_log = []

def ai_meal_recipe_suggestions(user_profile, calorie_target, model, meal_type=None, days=1):
    """
    Generate meal and recipe suggestions using AI.
    - meal_type: 'breakfast', 'lunch', 'dinner', 'snacks', or None for full day
    - days: number of days to generate (1 for today, 7 for a week, etc.)
    Returns: AI response text (so you can save it as a favorite if desired)
    """
    dietary_restrictions = []
    if user_profile.get('dietary_preference', '').lower() in ['veg', 'vegetarian']:
        dietary_restrictions.append("vegetarian")
    if user_profile.get('dietary_preference', '').lower() == 'vegan':
        dietary_restrictions.append("vegan")
    if user_profile.get('gluten_free'):
        dietary_restrictions.append("gluten-free")
    if user_profile.get('lactose_intolerant'):
        dietary_restrictions.append("lactose-free")
    if user_profile.get('allergies'):
        dietary_restrictions += [f"no {a}" for a in user_profile['allergies']]

    restriction_str = ", ".join(dietary_restrictions) if dietary_restrictions else "none"

    prompt = f"""
    You are a certified nutritionist and chef. Create a meal plan for a {user_profile['age']}-year-old {user_profile['gender']} who is {user_profile['height_cm']} cm tall, weighs {user_profile['weight_kg']} kg, and wants to {user_profile['goal']}.
    - Dietary restrictions: {restriction_str}
    - Calorie target: {calorie_target} kcal per day
    - Meals needed: {meal_type if meal_type else 'all meals'} for {days} day(s)
    For each meal, provide:
    - Dish name
    - Simple recipe (ingredient list and basic steps)
    - Estimated calories per serving
    - Macronutrient breakdown (carbs, protein, fat in grams)
    - (If possible) Suggest a shopping list for the day at the end.
    Output in a clear, readable format (markdown table for meals, then shopping list).
    """
    response = model.generate_content(prompt)
    print(response.text)
    return response.text

def rate_and_feedback_on_recipe(recipe_text):
    """
    Ask the user to rate and give feedback on the recipe.
    Optionally, save to favorites.
    """
    print("\n--- Rate & Feedback ---")
    rating = input("How would you rate this recipe/plan? (1-5): ")
    feedback = input("Any feedback or comments? (optional): ")
    recipe_feedback_log.append({'recipe': recipe_text, 'rating': rating, 'feedback': feedback})
    save = input("Save this recipe/plan to your favorites? (y/n): ").strip().lower()
    if save == 'y':
        favorite_recipes.append(recipe_text)
        print("Recipe/plan saved to your favorites!")
    else:
        print("Recipe/plan not saved.")

def show_favorite_recipes():
    """
    Display all favorite recipes/plans.
    """
    print("\n--- Your Favorite Recipes/Plans ---")
    if not favorite_recipes:
        print("No favorites saved yet.")
    for i, recipe in enumerate(favorite_recipes, 1):
        print(f"\n--- Favorite #{i} ---\n")
        print(recipe)

# --- Example Usage ---
# 1. Generate a meal/recipe suggestion:
# recipe_text = ai_meal_recipe_suggestions(user_profile, calorie_target, model)
# 2. Rate and optionally save it:
# rate_and_feedback_on_recipe(recipe_text)
# 3. Show all favorites:
# show_favorite_recipes()

recipe_text = ai_meal_recipe_suggestions(user_profile, calorie_target, model)

# --- Interactive AI Meal & Recipe Suggestion System (Single Meal) ---

favorite_recipes = []
recipe_feedback_log = []

def ai_single_meal_suggestion(user_profile, calorie_target, model):
    """
    Interactively ask user for meal type and generate a recipe suggestion for that meal only.
    """
    meal_types = ['breakfast', 'lunch', 'dinner', 'snacks']
    print("Which meal would you like a suggestion for?")
    for i, meal in enumerate(meal_types, 1):
        print(f"{i}. {meal.capitalize()}")
    while True:
        try:
            choice = int(input("Enter the number for your choice: "))
            if 1 <= choice <= len(meal_types):
                meal_type = meal_types[choice-1]
                break
            else:
                print("Invalid choice. Please enter a number from the list.")
        except:
            print("Invalid input. Please enter a number.")

    dietary_restrictions = []
    if user_profile.get('dietary_preference', '').lower() in ['veg', 'vegetarian']:
        dietary_restrictions.append("vegetarian")
    if user_profile.get('dietary_preference', '').lower() == 'vegan':
        dietary_restrictions.append("vegan")
    if user_profile.get('gluten_free'):
        dietary_restrictions.append("gluten-free")
    if user_profile.get('lactose_intolerant'):
        dietary_restrictions.append("lactose-free")
    if user_profile.get('allergies'):
        dietary_restrictions += [f"no {a}" for a in user_profile['allergies']]

    restriction_str = ", ".join(dietary_restrictions) if dietary_restrictions else "none"

    prompt = f"""
    You are a certified nutritionist and chef. Suggest a {meal_type} recipe for a {user_profile['age']}-year-old {user_profile['gender']} who is {user_profile['height_cm']} cm tall, weighs {user_profile['weight_kg']} kg, and wants to {user_profile['goal']}.
    - Dietary restrictions: {restriction_str}
    - Calorie target: {calorie_target} kcal per day
    For the {meal_type}, provide:
    - Dish name
    - Simple recipe (ingredient list and basic steps)
    - Estimated calories per serving
    - Macronutrient breakdown (carbs, protein, fat in grams)
    Output in a clear, readable format.
    """
    response = model.generate_content(prompt)
    print(response.text)
    return response.text

def rate_and_feedback_on_recipe(recipe_text):
    """
    Ask the user to rate and give feedback on the recipe.
    Optionally, save to favorites.
    """
    print("\n--- Rate & Feedback ---")
    rating = input("How would you rate this recipe? (1-5): ")
    feedback = input("Any feedback or comments? (optional): ")
    recipe_feedback_log.append({'recipe': recipe_text, 'rating': rating, 'feedback': feedback})
    save = input("Save this recipe to your favorites? (y/n): ").strip().lower()
    if save == 'y':
        favorite_recipes.append(recipe_text)
        print("Recipe saved to your favorites!")
    else:
        print("Recipe not saved.")

def show_favorite_recipes():
    """
    Display all favorite recipes.
    """
    print("\n--- Your Favorite Recipes ---")
    if not favorite_recipes:
        print("No favorites saved yet.")
    for i, recipe in enumerate(favorite_recipes, 1):
        print(f"\n--- Favorite #{i} ---\n")
        print(recipe)

# --- Example Usage ---
# 1. Get a meal suggestion:
# recipe_text = ai_single_meal_suggestion(user_profile, calorie_target, model)
# 2. Rate and optionally save it:
# rate_and_feedback_on_recipe(recipe_text)
# 3. Show all favorites:
# show_favorite_recipes()

recipe_text = ai_single_meal_suggestion(user_profile, calorie_target, model)

rate_and_feedback_on_recipe(recipe_text)

# --- Fitness & Activity Guidance Module ---

from datetime import date, datetime
import matplotlib.pyplot as plt

# Step log and workout log
step_log = {}
workout_log = []
favorite_workouts = []

# 1. SUGGEST AND SET STEP GOAL (AI or rule-based, with user customization)
def suggest_step_goal(user_profile, model=None):
    """
    Suggest an ideal step goal based on user profile and goal.
    If model is provided, use AI; else, use rules.
    """
    import re
    if model:
        prompt = f"""
        You are a fitness coach. Suggest an ideal daily step goal for a {user_profile['age']}-year-old {user_profile['gender']} who is {user_profile['height_cm']} cm tall, weighs {user_profile['weight_kg']} kg, has an activity level of {user_profile['activity_level']}, and whose goal is {user_profile['goal']}.
        Output ONLY the step number (integer, no units or extra text).
        """
        response = model.generate_content(prompt)
        match = re.search(r'(\d+)', response.text)
        if match:
            suggested_goal = int(match.group(1))
        else:
            suggested_goal = 10000  # fallback
    else:
        # Simple rules
        if user_profile['goal'].lower() == 'weight loss':
            suggested_goal = 11000
        elif user_profile['goal'].lower() == 'weight gain':
            suggested_goal = 8000
        else:
            suggested_goal = 10000
        # Adjust for age/activity
        if user_profile['age'] > 60 or user_profile['activity_level'].lower() == 'low':
            suggested_goal -= 2000
        elif user_profile['activity_level'].lower() == 'high':
            suggested_goal += 2000
        suggested_goal = max(5000, suggested_goal)  # never below 5k

    print(f"Suggested daily step goal: {suggested_goal}")
    try:
        user_input = input(f"Press Enter to accept, or enter your own step goal: ")
        if user_input.strip():
            step_goal = int(user_input)
        else:
            step_goal = suggested_goal
    except:
        print("Invalid input, using suggested goal.")
        step_goal = suggested_goal
    print(f"Your daily step goal is set to: {step_goal}")
    return step_goal

# 2. Log steps
def log_steps(step_log, step_goal):
    today = str(date.today())
    try:
        steps = int(input(f"Enter your step count for today (Goal: {step_goal}): "))
    except:
        print("Invalid input, please enter a number.")
        return log_steps(step_log, step_goal)
    step_log[today] = steps
    if steps >= step_goal:
        print("🎉 Great job! You met your step goal today!")
    else:
        print(f"Keep going! You are {step_goal - steps} steps away from your goal.")

# 3. Plot step trend
def plot_step_trend(step_log, step_goal):
    if not step_log:
        print("No step data to plot.")
        return
    dates = list(step_log.keys())
    steps = list(step_log.values())
    plt.figure(figsize=(8,4))
    plt.bar(dates, steps, color='green', label='Steps')
    plt.axhline(step_goal, color='orange', linestyle='--', label='Goal')
    plt.title("Daily Step Count")
    plt.xlabel("Date")
    plt.ylabel("Steps")
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# 4. AI-powered home workout suggestion
def ai_home_workout_suggestion(user_profile, model, workout_type=None, duration=None):
    """
    Suggest a home workout using AI.
    - workout_type: e.g., 'upper body', 'yoga', 'cardio', or None for general
    - duration: e.g., '15 minutes', or None for default
    """
    prompt = f"""
    You are a certified fitness coach. Suggest a home workout for a {user_profile['age']}-year-old {user_profile['gender']} who is {user_profile['height_cm']} cm tall, weighs {user_profile['weight_kg']} kg, and has an activity level of {user_profile['activity_level']}.
    Goal: {user_profile['goal']}
    Workout type: {workout_type if workout_type else 'general'}
    Duration: {duration if duration else '20-30 minutes'}
    The workout should require no equipment (or minimal, e.g., mat, chair).
    For each exercise, provide:
    - Name
    - Sets & reps or duration
    - Brief instructions
    Output in a clear, readable format.
    """
    response = model.generate_content(prompt)
    print(response.text)
    return response.text

# 5. Log workout
def log_workout(workout_log, workout_text):
    today = str(date.today())
    workout_log.append({'date': today, 'workout': workout_text})
    print("Workout logged!")

# 6. Rate and save workout
def rate_and_save_workout(workout_text):
    print("\n--- Rate & Save Workout ---")
    rating = input("How would you rate this workout? (1-5): ")
    feedback = input("Any feedback or comments? (optional): ")
    save = input("Save this workout to your favorites? (y/n): ").strip().lower()
    if save == 'y':
        favorite_workouts.append(workout_text)
        print("Workout saved to your favorites!")
    else:
        print("Workout not saved.")

# 7. Show favorite workouts
def show_favorite_workouts():
    print("\n--- Your Favorite Workouts ---")
    if not favorite_workouts:
        print("No favorites saved yet.")
    for i, workout in enumerate(favorite_workouts, 1):
        print(f"\n--- Favorite Workout #{i} ---\n")
        print(workout)

# --- Example Usage ---
# 1. Suggest and set your step goal (run once, or whenever user profile changes):
# step_goal = suggest_step_goal(user_profile, model)
# 2. Log steps:
# log_steps(step_log, step_goal)
# 3. Plot step trend:
# plot_step_trend(step_log, step_goal)
# 4. Get a home workout suggestion:
# workout_text = ai_home_workout_suggestion(user_profile, model)
# 5. Log the workout:
# log_workout(workout_log, workout_text)
# 6. Rate and save the workout:
# rate_and_save_workout(workout_text)
# 7. Show all favorite workouts:
# show_favorite_workouts()

step_goal = suggest_step_goal(user_profile, model)

log_steps(step_log, step_goal)

plot_step_trend(step_log, step_goal)

workout_text = ai_home_workout_suggestion(user_profile, model)

"""**ai** **chat coach**"""

# --- AI Health Coach Chat Interface ---

chat_history = []
favorite_answers = []

def ai_health_coach_chat(user_profile, model, meal_log=None, weight_log=None, step_log=None, mode=None):
    """
    Interactive chat with the AI health coach.
    - mode: 'general', 'nutrition', 'fitness', 'motivation', or None for auto
    """
    print("\nWelcome to your AI Health Coach! Type 'quit' to exit, 'clear' to reset chat, 'fav' to save last answer, or 'rate' to rate last answer.")
    print("Quick actions: 'progress', 'suggest dinner', 'steps today', 'weight trend', 'favorite answers'")
    while True:
        user_input = input("\nYou: ").strip()
        if user_input.lower() in ['quit', 'exit']:
            print("Goodbye! Stay healthy!")
            break
        if user_input.lower() == 'clear':
            chat_history.clear()
            print("Chat history cleared.")
            continue
        if user_input.lower() == 'fav':
            if chat_history:
                favorite_answers.append(chat_history[-1]['ai'])
                print("Last answer saved to favorites.")
            else:
                print("No answer to save.")
            continue
        if user_input.lower() == 'favorite answers':
            if not favorite_answers:
                print("No favorites yet.")
            for i, ans in enumerate(favorite_answers, 1):
                print(f"\n--- Favorite #{i} ---\n{ans}")
            continue
        if user_input.lower() == 'rate':
            if chat_history:
                rating = input("Rate the last answer (1-5): ")
                chat_history[-1]['rating'] = rating
                print("Thank you for your feedback!")
            else:
                print("No answer to rate.")
            continue
        # Quick actions
        if user_input.lower() == 'progress' and meal_log and weight_log and step_log:
            from datetime import date
            today = str(date.today())
            calories = sum(e['calories'] for cat in meal_log.get(today, {}) for e in meal_log[today][cat])
            weight = weight_log.get(today, 'N/A')
            steps = step_log.get(today, 'N/A')
            ai_answer = f"Today's progress:\n- Calories: {calories}\n- Weight: {weight}\n- Steps: {steps}"
            print(f"\nAI Coach: {ai_answer}")
            chat_history.append({'user': user_input, 'ai': ai_answer})
            continue
        if user_input.lower() == 'suggest dinner':
            prompt = f"Suggest a healthy dinner for me based on my profile: {user_profile}"
            ai_answer = model.generate_content(prompt).text
            print(f"\nAI Coach: {ai_answer}")
            chat_history.append({'user': user_input, 'ai': ai_answer})
            continue
        if user_input.lower() == 'steps today' and step_log:
            from datetime import date
            today = str(date.today())
            steps = step_log.get(today, 'N/A')
            ai_answer = f"Your steps today: {steps}"
            print(f"\nAI Coach: {ai_answer}")
            chat_history.append({'user': user_input, 'ai': ai_answer})
            continue
        if user_input.lower() == 'weight trend' and weight_log:
            import pandas as pd
            dates = sorted(weight_log.keys())
            if len(dates) >= 2:
                delta = weight_log[dates[-1]] - weight_log[dates[0]]
                ai_answer = f"Your weight changed by {delta:+.2f} kg from {dates[0]} to {dates[-1]}."
            else:
                ai_answer = "Not enough data to show a trend."
            print(f"\nAI Coach: {ai_answer}")
            chat_history.append({'user': user_input, 'ai': ai_answer})
            continue

        # Build context for AI
        context = f"""
        User profile: {user_profile}
        Recent logs:
        - Last meal: {meal_log[max(meal_log.keys())] if meal_log else 'N/A'}
        - Last weight: {weight_log[max(weight_log.keys())] if weight_log else 'N/A'}
        - Last steps: {step_log[max(step_log.keys())] if step_log else 'N/A'}
        Chat history: {[{'user': c['user'], 'ai': c['ai']} for c in chat_history[-3:]]}
        Mode: {mode if mode else 'auto'}
        """
        prompt = f"""
        You are a super-efficient, friendly, and expert AI health coach.
        {f'Focus on {mode}.' if mode else ''}
        Use the user's profile and logs to personalize your answer.
        If the user asks about their progress, reference their logs.
        If the user asks for motivation, give encouragement.
        If the user asks about nutrition or fitness, give practical, evidence-based advice.
        If the user asks a follow-up, use the chat history for context.
        User says: {user_input}
        """
        # Optionally, you can add the context to the prompt for more personalization:
        # prompt = context + prompt
        ai_answer = model.generate_content(prompt).text
        print(f"\nAI Coach: {ai_answer}")
        chat_history.append({'user': user_input, 'ai': ai_answer})

# --- Example Usage ---
# ai_health_coach_chat(user_profile, model, meal_log, weight_log, step_log)

ai_health_coach_chat(user_profile, model, meal_log, weight_log, step_log)